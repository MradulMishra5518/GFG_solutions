class Solution {
    private:
    void checkBinaryTree(Node* node, vector<int> &v){
        queue<Node*> q;
        q.push(node);
        while(!q.empty()){
            Node* curr = q.front();
            v.emplace_back(curr->data);
            q.pop();
            if(curr->left ){
                    q.push(curr->left);
                }
            if(curr->right){
                    q.push(curr->right);
                }
        }
    }
  public:
    bool isHeap(Node* tree) {
        // code here
        vector<int> v;
        checkBinaryTree(tree, v);
        int n = v.size();
        for(int i=0; i<=(n-2)/2; i++){
            int left_child = 2*i+1;
            int right_child = 2*i+2;
            if(left_child < n && v[i] < v[left_child]) return false;
            if(right_child < n && v[i] < v[right_child]) return false;
        }
        return true;
    }
};
